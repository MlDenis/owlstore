// Code generated by MockGen. DO NOT EDIT.
// Source: interfacestorage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	models "github.com/MlDenis/internal/accrual/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDBInterfaceOrdersAccrual is a mock of DBInterfaceOrdersAccrual interface.
type MockDBInterfaceOrdersAccrual struct {
	ctrl     *gomock.Controller
	recorder *MockDBInterfaceOrdersAccrualMockRecorder
}

// MockDBInterfaceOrdersAccrualMockRecorder is the mock recorder for MockDBInterfaceOrdersAccrual.
type MockDBInterfaceOrdersAccrualMockRecorder struct {
	mock *MockDBInterfaceOrdersAccrual
}

// NewMockDBInterfaceOrdersAccrual creates a new mock instance.
func NewMockDBInterfaceOrdersAccrual(ctrl *gomock.Controller) *MockDBInterfaceOrdersAccrual {
	mock := &MockDBInterfaceOrdersAccrual{ctrl: ctrl}
	mock.recorder = &MockDBInterfaceOrdersAccrualMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBInterfaceOrdersAccrual) EXPECT() *MockDBInterfaceOrdersAccrualMockRecorder {
	return m.recorder
}

// GetAllOrdersAndGoods mocks base method.
func (m *MockDBInterfaceOrdersAccrual) GetAllOrdersAndGoods(ctx context.Context) ([]models.OrderForRegister, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrdersAndGoods", ctx)
	ret0, _ := ret[0].([]models.OrderForRegister)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrdersAndGoods indicates an expected call of GetAllOrdersAndGoods.
func (mr *MockDBInterfaceOrdersAccrualMockRecorder) GetAllOrdersAndGoods(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrdersAndGoods", reflect.TypeOf((*MockDBInterfaceOrdersAccrual)(nil).GetAllOrdersAndGoods), ctx)
}

// GetAllRewards mocks base method.
func (m *MockDBInterfaceOrdersAccrual) GetAllRewards(ctx context.Context) ([]models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRewards", ctx)
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRewards indicates an expected call of GetAllRewards.
func (mr *MockDBInterfaceOrdersAccrualMockRecorder) GetAllRewards(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRewards", reflect.TypeOf((*MockDBInterfaceOrdersAccrual)(nil).GetAllRewards), ctx)
}

// GetOrderFromOrdersAccrualDB mocks base method.
func (m *MockDBInterfaceOrdersAccrual) GetOrderFromOrdersAccrualDB(ctx context.Context, ordernumber int64) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderFromOrdersAccrualDB", ctx, ordernumber)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderFromOrdersAccrualDB indicates an expected call of GetOrderFromOrdersAccrualDB.
func (mr *MockDBInterfaceOrdersAccrualMockRecorder) GetOrderFromOrdersAccrualDB(ctx, ordernumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderFromOrdersAccrualDB", reflect.TypeOf((*MockDBInterfaceOrdersAccrual)(nil).GetOrderFromOrdersAccrualDB), ctx, ordernumber)
}

// LoadAccrualStatusOrder mocks base method.
func (m *MockDBInterfaceOrdersAccrual) LoadAccrualStatusOrder(ctx context.Context, status string, ordernumber, accraul int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAccrualStatusOrder", ctx, status, ordernumber, accraul)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadAccrualStatusOrder indicates an expected call of LoadAccrualStatusOrder.
func (mr *MockDBInterfaceOrdersAccrualMockRecorder) LoadAccrualStatusOrder(ctx, status, ordernumber, accraul interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAccrualStatusOrder", reflect.TypeOf((*MockDBInterfaceOrdersAccrual)(nil).LoadAccrualStatusOrder), ctx, status, ordernumber, accraul)
}

// LoadOrderInOrdersAccrualDB mocks base method.
func (m *MockDBInterfaceOrdersAccrual) LoadOrderInOrdersAccrualDB(ctx context.Context, order *models.OrderForRegister) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrderInOrdersAccrualDB", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadOrderInOrdersAccrualDB indicates an expected call of LoadOrderInOrdersAccrualDB.
func (mr *MockDBInterfaceOrdersAccrualMockRecorder) LoadOrderInOrdersAccrualDB(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrderInOrdersAccrualDB", reflect.TypeOf((*MockDBInterfaceOrdersAccrual)(nil).LoadOrderInOrdersAccrualDB), ctx, order)
}

// RegisterInfoInDB mocks base method.
func (m *MockDBInterfaceOrdersAccrual) RegisterInfoInDB(ctx context.Context, goods *models.Reward) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInfoInDB", ctx, goods)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterInfoInDB indicates an expected call of RegisterInfoInDB.
func (mr *MockDBInterfaceOrdersAccrualMockRecorder) RegisterInfoInDB(ctx, goods interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInfoInDB", reflect.TypeOf((*MockDBInterfaceOrdersAccrual)(nil).RegisterInfoInDB), ctx, goods)
}
