// Code generated by MockGen. DO NOT EDIT.
// Source: interfacestorage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	models "github.com/MlDenis/internal/gofermart/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDBInterface is a mock of DBInterface interface.
type MockDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBInterfaceMockRecorder
}

// MockDBInterfaceMockRecorder is the mock recorder for MockDBInterface.
type MockDBInterfaceMockRecorder struct {
	mock *MockDBInterface
}

// NewMockDBInterface creates a new mock instance.
func NewMockDBInterface(ctrl *gomock.Controller) *MockDBInterface {
	mock := &MockDBInterface{ctrl: ctrl}
	mock.recorder = &MockDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBInterface) EXPECT() *MockDBInterfaceMockRecorder {
	return m.recorder
}

// AuthorizationBalance mocks base method.
func (m *MockDBInterface) AuthorizationBalance(ctx context.Context, userlogin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizationBalance", ctx, userlogin)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthorizationBalance indicates an expected call of AuthorizationBalance.
func (mr *MockDBInterfaceMockRecorder) AuthorizationBalance(ctx, userlogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizationBalance", reflect.TypeOf((*MockDBInterface)(nil).AuthorizationBalance), ctx, userlogin)
}

// EditBalanceWithdraw mocks base method.
func (m *MockDBInterface) EditBalanceWithdraw(ctx context.Context, userlogin string, sumwithdraw int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditBalanceWithdraw", ctx, userlogin, sumwithdraw)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditBalanceWithdraw indicates an expected call of EditBalanceWithdraw.
func (mr *MockDBInterfaceMockRecorder) EditBalanceWithdraw(ctx, userlogin, sumwithdraw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditBalanceWithdraw", reflect.TypeOf((*MockDBInterface)(nil).EditBalanceWithdraw), ctx, userlogin, sumwithdraw)
}

// GetBalanceDB mocks base method.
func (m *MockDBInterface) GetBalanceDB(ctx context.Context, userlogin string) (*models.ResponseBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceDB", ctx, userlogin)
	ret0, _ := ret[0].(*models.ResponseBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceDB indicates an expected call of GetBalanceDB.
func (mr *MockDBInterfaceMockRecorder) GetBalanceDB(ctx, userlogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceDB", reflect.TypeOf((*MockDBInterface)(nil).GetBalanceDB), ctx, userlogin)
}

// GetUser mocks base method.
func (m *MockDBInterface) GetUser(ctx context.Context, userData *models.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDBInterfaceMockRecorder) GetUser(ctx, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDBInterface)(nil).GetUser), ctx, userData)
}

// GetUserOrders mocks base method.
func (m *MockDBInterface) GetUserOrders(ctx context.Context, user *models.UserData) ([]models.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", ctx, user)
	ret0, _ := ret[0].([]models.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockDBInterfaceMockRecorder) GetUserOrders(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockDBInterface)(nil).GetUserOrders), ctx, user)
}

// GetWithdrawalsDB mocks base method.
func (m *MockDBInterface) GetWithdrawalsDB(ctx context.Context, login string) ([]models.WithdrawOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsDB", ctx, login)
	ret0, _ := ret[0].([]models.WithdrawOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsDB indicates an expected call of GetWithdrawalsDB.
func (mr *MockDBInterfaceMockRecorder) GetWithdrawalsDB(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsDB", reflect.TypeOf((*MockDBInterface)(nil).GetWithdrawalsDB), ctx, login)
}

// LoadOrderInDB mocks base method.
func (m *MockDBInterface) LoadOrderInDB(ctx context.Context, userData *models.Orders) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrderInDB", ctx, userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadOrderInDB indicates an expected call of LoadOrderInDB.
func (mr *MockDBInterfaceMockRecorder) LoadOrderInDB(ctx, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrderInDB", reflect.TypeOf((*MockDBInterface)(nil).LoadOrderInDB), ctx, userData)
}

// RegisterUser mocks base method.
func (m *MockDBInterface) RegisterUser(ctx context.Context, userData models.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockDBInterfaceMockRecorder) RegisterUser(ctx, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockDBInterface)(nil).RegisterUser), ctx, userData)
}
